{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1415142956000},{"_id":"scaffolds/page.md","mtime":1415142956000},{"_id":"scaffolds/photo.md","mtime":1415142956000},{"_id":"scaffolds/post.md","mtime":1415142956000},{"_id":"source/404.md","mtime":1415154412000},{"_id":"source/_posts/Hello-World-0.md","mtime":1415142956000},{"_id":"source/_posts/xml整理-一.md","mtime":1415142956000},{"_id":"source/_posts/xml整理（二）.md","mtime":1415303745000},{"_id":"source/about/index.md","mtime":1415142956000},{"_id":"themes/landscape/Gruntfile.js","mtime":1415142956000},{"_id":"themes/landscape/LICENSE","mtime":1415142956000},{"_id":"themes/landscape/README.md","mtime":1415142956000},{"_id":"themes/landscape/_config.yml","mtime":1415142956000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1415142956000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/category.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/index.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/page.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/post.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1415142956000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1415142956000},{"_id":"themes/landscape/source/js/script.js","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1415142956000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1415142956000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/style.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1415142956000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1415142956000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1415142956000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1415142956000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1415142956000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1415142956000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1415142956000}],"Category":[],"Page":[{"title":"cannot find the page","layout":"false","content":"<p>Sorry, we can’t find that page that you’re looking for. You can try take for a look by going <a href=\"/\">back to the homepage</a>.</p>\n<p><a href=\"/\"><img src=\"/images/404.jpg\" alt=\"Constructocat by https://github.com/jasoncostello\" style=\"width: 400px;\"></a></p>\n","source":"404.md","raw":"title: cannot find the page\nlayout: false\n---\nSorry, we can't find that page that you're looking for. You can try take for a look by going [back to the homepage]({{ site.baseurl }}/).\n\n[<img src=\"{{ site.baseurl }}/images/404.jpg\" alt=\"Constructocat by https://github.com/jasoncostello\" style=\"width: 400px;\"/>]({{ site.baseurl }}/)\n","date":1415154412000,"updated":1415154412000,"path":"404.html","excerpt":"","_id":"5tq10lv2e3ns8qvp","comments":true},{"title":"about","date":1415137837000,"content":"<p>I am a PG student on Advanced Computer Science &amp; IT Management.</p>\n<h3 id=\"More_Information\">More Information</h3>\n<p>Hi, there!</p>\n<p>I am a dreamer. </p>\n<p>I like basketball. </p>\n<p>I like music. </p>\n<p>I like programing.</p>\n<p>I may be a geek.</p>\n<h3 id=\"Contact_me\">Contact me</h3>\n<p><a href=\"mailto:tongfeifan@foxmail.com\" target=\"_blank\" rel=\"external\">tongfeifan@foxmail.com</a></p>\n","source":"about/index.md","raw":"title: about\ndate: 2014-11-04 21:50:37\n---\n\nI am a PG student on Advanced Computer Science & IT Management.\n\n### More Information\n\nHi, there!\n\nI am a dreamer. \n\nI like basketball. \n\nI like music. \n\nI like programing.\n\nI may be a geek.\n\n### Contact me\n\n[tongfeifan@foxmail.com](mailto:tongfeifan@foxmail.com)","updated":1415142956000,"path":"about/index.html","excerpt":"","_id":"rthp0s9efeqy3fsl","comments":true,"layout":"page"}],"Post":[{"title":"xml整理(一)","date":1415037765000,"tags":["gp2y7iybp72u6pzj","c6nu8oagq47t7gl2"],"content":"<p><em>Github博客在第一次建立之后，一直在赶作业，直到今天早上提交了两个deadline，终于松了一口气。这里接下来将是个人记录学习，以及一些想法的地方。目前计算机的课Semi-structured Data and the Web 和商学院的课Entrepreneurial Commercialisation of Knowledge 都已经结课，接下来的时间里将整理一下两门课的内容，若有空闲，则同时整理一下其他课。</em><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"何谓Semi-structured_data\">何谓Semi-structured data</h3>\n<p>根据<a href=\"http://en.wikipedia.org/wiki/Semi-structured_data\" target=\"_blank\" rel=\"external\">维基百科</a>，semi-structured data定义如下：</p>\n<blockquote>\n<p>Semi-structured data is a form of structured data that does not conform with the formal structure of data models associated with relational databases or other forms of data tables, but nonetheless contains tags or other markers to separate semantic elements and enforce hierarchies of records and fields within the data. Therefore, it is also known as sef-desribing structure.</p>\n</blockquote>\n<p>简单说便是，半结构化数据不同于关系型数据库中的正规数据结构，而是通过tag或其他标记来区分数据元素与等级。<br>在<a href=\"http://en.wikipedia.org/wiki/Semi-structured_data#Types_of_Semi-structured_data\" target=\"_blank\" rel=\"external\">维基百科</a>中，Semi-structured data的类型分别有XML和JSON，XML作为最经典，曾经最流行的半结构化语言，被广泛应用于各种网络服务中，而JSON则因为其可读性更强，逐渐作为XML的替代品。这里主要讨论的是XML相关技术。</p>\n<hr>\n<h3 id=\"xml相关技术内容\">xml相关技术内容</h3>\n<p>Semi-structured Data and the Web课程讲述的内容是以xml为核心的所有围绕xml展开的技术。其中涉及到的技术内容包括：<br><img src=\"http://img02.taobaocdn.com/imgextra/i2/439962795/TB2msLEaVXXXXa_XXXXXXXXXXXX_!!439962795.png\" alt=\"XML map\"><br>在接下来的内容中，会分步逐渐解释每一项技术的内容。首先提到的自然是核心技术XML</p>\n<hr>\n<h3 id=\"什么是XML\">什么是XML</h3>\n<ul>\n<li>XML是一个W3C标准</li>\n<li>XML被设计成<strong>simple</strong>, <strong>generic</strong> and <strong>extensible</strong></li>\n<li>XML文件可描述<strong>structure</strong>和<strong>data</strong>，并可关联于一个<strong>DOM tree</strong></li>\n<li>XML由element分割成更小的部分，element可包含element，elment之间存在无歧义的等级制度。</li>\n<li>一个XML文件有一个root element和其他element组成</li>\n</ul>\n<p>以下为一个典型的XML文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div><div class=\"line\"><span class=\"doctype\">&lt;!DOCTYPE cartoon SYSTEM \"cartoon.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">cartoon</span> <span class=\"attribute\">copyright</span>=<span class=\"value\">\"United Feature Syndicate\"</span> <span class=\"attribute\">year</span>=<span class=\"value\">\"2000\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">series</span>&gt;</span>Dilbert<span class=\"tag\">&lt;/<span class=\"title\">series</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">author</span>&gt;</span>Scott Adams<span class=\"tag\">&lt;/<span class=\"title\">author</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">characters</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"title\">character</span>&gt;</span>The Pointy-Haired Boss<span class=\"tag\">&lt;/<span class=\"title\">character</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"title\">character</span>&gt;</span>Dilbert<span class=\"tag\">&lt;/<span class=\"title\">character</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"title\">characters</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">panels</span>&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">panels</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">cartoon</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>其中第1行代码<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code>为XML声明，该声明定义了XML版本为1.0，字符编码UTF-8。第2行代码<code>&lt;!DOCTYPE cartoon SYSTEM &quot;cartoon.dtd&quot;&gt;</code>为XML 类型声明（可选），其中引用一个称为Document Type Definition的语法描述文件；<code>cartoon</code>为必须为文件的root element。</p>\n<h3 id=\"XML_elements\">XML elements</h3>\n<p>element 定义</p>\n<ul>\n<li>element由标签界定</li>\n<li>标签在尖括号中</li>\n<li>标签区分大小写。e.g., <from>和<from>是不同的</from></from></li>\n<li>标签可分为开始标签&lt;…&gt;和结束标签</li>\n<li>element有一对开始标签与结束标签所界定</li>\n<li>element具有属性(attribute)。e.g., </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">cartoon</span> <span class=\"attribute\">copyright</span>=<span class=\"value\">\"United Feature Sndicate\"</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>element概念</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">element-name</span> <span class=\"attribute\">attr-decl1</span> <span class=\"attribute\">...</span> <span class=\"attribute\">attr-decln</span>&gt;</span></div><div class=\"line\">    content</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">element-name</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>允许多个属性。</li>\n<li>属性声明格式<code>attr-name=&quot;attr-value&quot;</code>。</li>\n<li>一个element中，每个属性最多只允许出现一次。</li>\n<li>content可以为<strong>空</strong><1>，可以为<strong>text</strong><2>，可以为一或多个<strong>element</strong><3>。<br>其中<2>称为simple content，<3>称为element content，<2>+<3>称为mixed content。</3></2></3></2></3></2></1></li>\n<li>空元素可以写做。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">element-name</span> <span class=\"attribute\">attr-decl1</span> <span class=\"attribute\">...</span> <span class=\"attribute\">attr-decln</span> /&gt;</span></div></pre></td></tr></table></figure>\n\n<p>Well-formed XML document</p>\n<ul>\n<li>只有一个root element。</li>\n<li>标签,&lt;,&gt;是正确的（包括在字符串数据中没有&lt;或&amp;）。</li>\n<li>标签以正确的方式嵌套。</li>\n<li>对每一个标签来说，属性都是唯一的，且属性值在引号内。</li>\n<li>标签内没有注释。<br>Well-formed是一个XML最基本的要求，只有如此，XML才能被解析成树。</li>\n</ul>\n<hr>\n<p><em>今天先整理XML文件的相关内容，下一次我们来讲一讲关于 Schema的相关内容，其中将会涉及到DTD、XML Schema、RelaxNG。</em></p>\n","source":"_posts/xml整理-一.md","raw":"title: xml整理(一)\ndate: 2014-11-03 18:02:45\ntags: [xml, course]\n---\n\n\n*Github博客在第一次建立之后，一直在赶作业，直到今天早上提交了两个deadline，终于松了一口气。这里接下来将是个人记录学习，以及一些想法的地方。目前计算机的课Semi-structured Data and the Web 和商学院的课Entrepreneurial Commercialisation of Knowledge 都已经结课，接下来的时间里将整理一下两门课的内容，若有空闲，则同时整理一下其他课。*<!--more-->\n\n---\n\n###何谓Semi-structured data\n根据[维基百科](http://en.wikipedia.org/wiki/Semi-structured_data)，semi-structured data定义如下：\n\n> Semi-structured data is a form of structured data that does not conform with the formal structure of data models associated with relational databases or other forms of data tables, but nonetheless contains tags or other markers to separate semantic elements and enforce hierarchies of records and fields within the data. Therefore, it is also known as sef-desribing structure.\n\n简单说便是，半结构化数据不同于关系型数据库中的正规数据结构，而是通过tag或其他标记来区分数据元素与等级。\n在[维基百科](http://en.wikipedia.org/wiki/Semi-structured_data#Types_of_Semi-structured_data)中，Semi-structured data的类型分别有XML和JSON，XML作为最经典，曾经最流行的半结构化语言，被广泛应用于各种网络服务中，而JSON则因为其可读性更强，逐渐作为XML的替代品。这里主要讨论的是XML相关技术。\n\n---\n\n###xml相关技术内容\n\nSemi-structured Data and the Web课程讲述的内容是以xml为核心的所有围绕xml展开的技术。其中涉及到的技术内容包括：\n![XML map][1]\n在接下来的内容中，会分步逐渐解释每一项技术的内容。首先提到的自然是核心技术XML\n\n---\n\n### 什么是XML\n- XML是一个W3C标准\n- XML被设计成**simple**, **generic** and **extensible**\n- XML文件可描述**structure**和**data**，并可关联于一个**DOM tree**\n- XML由element分割成更小的部分，element可包含element，elment之间存在无歧义的等级制度。\n- 一个XML文件有一个root element和其他element组成\n\n以下为一个典型的XML文件\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE cartoon SYSTEM \"cartoon.dtd\">\n<cartoon copyright=\"United Feature Syndicate\" year=\"2000\">\n    <prolog>\n        <series>Dilbert</series>\n        <author>Scott Adams</author>\n        <characters>\n            <character>The Pointy-Haired Boss</character>\n            <character>Dilbert</character>\n        </characters>\n    </prolog>\n    <panels>\n        ...\n    </panels>\n</cartoon>\n~~~\n\n其中第1行代码`<?xml version=\"1.0\" encoding=\"UTF-8\"?>`为XML声明，该声明定义了XML版本为1.0，字符编码UTF-8。第2行代码`<!DOCTYPE cartoon SYSTEM \"cartoon.dtd\">`为XML 类型声明（可选），其中引用一个称为Document Type Definition的语法描述文件；`cartoon`为必须为文件的root element。\n\n###XML elements\nelement 定义\n\n- element由标签界定\n- 标签在尖括号中\n- 标签区分大小写。e.g., <FROM>和<from>是不同的\n- 标签可分为开始标签<...>和结束标签</from>\n- element有一对开始标签与结束标签所界定\n- element具有属性(attribute)。e.g., \n\n```xml\n<cartoon copyright=\"United Feature Sndicate\">\n```\n\nelement概念\n\n\n```xml\n<element-name attr-decl1 ... attr-decln>\n    content\n</element-name>\n```\n\n- 允许多个属性。\n- 属性声明格式`attr-name=\"attr-value\"`。\n- 一个element中，每个属性最多只允许出现一次。\n- content可以为**空**<1>，可以为**text**<2>，可以为一或多个**element**<3>。\n其中<2>称为simple content，<3>称为element content，<2>+<3>称为mixed content。\n- 空元素可以写做。\n\n```xml\n<element-name attr-decl1 ... attr-decln />\n```\n\nWell-formed XML document\n- 只有一个root element。\n- 标签,<,>是正确的（包括在字符串数据中没有<或&）。\n- 标签以正确的方式嵌套。\n- 对每一个标签来说，属性都是唯一的，且属性值在引号内。\n- 标签内没有注释。\nWell-formed是一个XML最基本的要求，只有如此，XML才能被解析成树。\n\n---\n\n*今天先整理XML文件的相关内容，下一次我们来讲一讲关于 Schema的相关内容，其中将会涉及到DTD、XML Schema、RelaxNG。*\n  [1]: http://img02.taobaocdn.com/imgextra/i2/439962795/TB2msLEaVXXXXa_XXXXXXXXXXXX_!!439962795.png\n","slug":"xml整理-一","updated":1415142956000,"excerpt":"<p><em>Github博客在第一次建立之后，一直在赶作业，直到今天早上提交了两个deadline，终于松了一口气。这里接下来将是个人记录学习，以及一些想法的地方。目前计算机的课Semi-structured Data and the Web 和商学院的课Entrepreneurial Commercialisation of Knowledge 都已经结课，接下来的时间里将整理一下两门课的内容，若有空闲，则同时整理一下其他课。</em>","_id":"cikqkm62y3cwxi7y","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"xml整理（二）","date":1415240555000,"tags":["gp2y7iybp72u6pzj","c6nu8oagq47t7gl2"],"content":"<p><em>时隔两日，再次来整理XML的内容，似乎间隔有些长。终究还是不够勤快，压抑不住自己爱玩的心。今天在知乎上看到大师兄又写了一篇<a href=\"http://www.zhihu.com/question/26092705/answer/32989919\" target=\"_blank\" rel=\"external\">答案</a>。倒不是对所提的问题有何想法，只是大师兄的某些话说到了心坎里：</em><a id=\"more\"></a></p>\n<blockquote>\n<p>“你只要不想等，不愿信，你站起来，关灯，收拾干净，拍屁股走人，出来你就是铁人，没有人伤得了你，但这应该不是你想要的。</p>\n<p>这世上容易的，就是看破红尘，难的，恰是命里打滚，轻而易举，说一些不痛不痒，都是没想明白。”</p>\n</blockquote>\n<p><em>是吧，感情也罢，梦想也罢，默默地等待，默默地付出，只觉得该为某些事情热血地追求。若自己某日，打着看破的幌子，放弃坚持的初衷。那我，还是想要为尘世的纷扰而不得解吧。等吧，等到想要的结果，等到该来的人。</em></p>\n<blockquote>\n<p>“在散场的最后一秒到来之前，空荡荡的剧场里走进来一个人。</p>\n<p>你就一定要说：</p>\n<p>等你很久啦。”</p>\n</blockquote>\n<p><em>扯远了，只是想来接着整理我的XML的。今天打算整理DTD, XML schema,这几项属于Schema的内容。</em></p>\n<hr>\n<h3 id=\"何谓schema\">何谓schema</h3>\n<p>schema实际上一种描述语言，一般用于描述DBs或者XML，在此特指对XML的描述。通过Schema，可以描述XML的</p>\n<ul>\n<li>标签（tag）和属性（attribute）的名字</li>\n<li>文件的结构：（元素（element）如何嵌套、哪个元素拥有哪个属性）</li>\n<li>数据：类型（字符串？数字？）</li>\n</ul>\n<p>为何需要schema</p>\n<ul>\n<li>XML文档可以有更多可依赖的格式：结构，标签，数据类型。但同时想保持扩展性与灵活性。</li>\n<li>可以描述怎样的数据是合法的、期待的、事先设定。</li>\n</ul>\n<p>对于使用schema有两种使用方式：</p>\n<ul>\n<li>描述型（descriptive）:为他人描述XML文档，如此，便可知道如何更好地组织数据。</li>\n<li>规范型（prescriptive）:防止程序调用了错误的XML文档。</li>\n</ul>\n<hr>\n<h3 id=\"什么是DTD\">什么是DTD</h3>\n<p>DTD是在XML1.0时代的标准。DTD并不是一个典型的XML类型的文档，故而具有以下特点：</p>\n<ul>\n<li>不能被解析为一个DOM (Document Object Model)</li>\n<li>无法扩展（即不能在一个DTD文档中import另一个DTD文档）</li>\n<li>易读易写。</li>\n</ul>\n<h3 id=\"DTD如何描述XML\">DTD如何描述XML</h3>\n<p>描述一个逻辑结构的例子：</p>\n<ul>\n<li>elements</li>\n</ul>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">name</span>(#<span class=\"attribute\">PCDATA</span>)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">person</span>(<span class=\"attribute\">name</span>, <span class=\"attribute\">address</span>+, <span class=\"attribute\">email</span>*)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">address</span>(<span class=\"attribute\">city</span>,(<span class=\"attribute\">nr</span>,<span class=\"attribute\">street</span>)?)&gt;</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>attributes</li>\n</ul>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!ATTLIST name <span class=\"class\"><span class=\"keyword\">type</span></span>(family|personal|place) <span class=\"string\">\"personal\"</span>&gt;</div></pre></td></tr></table></figure>\n\n<p>此例子意为：元素name可以使用type属性，type可选值为family,personal,place，其中personal为默认值。<br>据此规范，正确的xml文档：</p>\n<figure class=\"highlight XML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">name</span>&gt;</span>Bijan<span class=\"tag\">&lt;/<span class=\"title\">name</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">name</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"personal\"</span>&gt;</span>Bijan<span class=\"tag\">&lt;/<span class=\"title\">name</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">name</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"family\"</span>&gt;</span>Parsia<span class=\"tag\">&lt;/<span class=\"title\">name</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>不正确的：</p>\n<figure class=\"highlight XML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">name</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"DontKnow\"</span>&gt;</span>Bijan<span class=\"tag\">&lt;/<span class=\"title\">name</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>由此，我们可以总结，DTD描述的模板如下：</p>\n<figure class=\"highlight XML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">element-name</span> (<span class=\"attribute\">element-content</span>)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ATTLIST</span> <span class=\"attribute\">element-name</span> <span class=\"attribute\">attribute-name</span> <span class=\"attribute\">attribute-type</span> <span class=\"attribute\">attribute-value</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>其中element-content支持使用元素名的正则表达式。</p>\n<p>另外DTD还能描述实体引用（类似宏定义）。例子如下：</p>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!<span class=\"keyword\">ENTITY</span> writer <span class=\"string\">\"Donald Duck\"</span>&gt;</div></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用DTD\">如何使用DTD</h3>\n<p>DTD在XML文档中有两种引入方式，一种为内嵌型（internal），另一种外置型（external）。</p>\n<p>内嵌型的使用方式：</p>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div><div class=\"line\"><span class=\"doctype\">&lt;!DOCTYPE cartoon[</span></div><div class=\"line\">&lt;!ELEMENT cartoon (prolog,panels)&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;!ELEMENT speech(#PCDATA)&gt;]&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">cartoon</span> <span class=\"attribute\">copyright</span>=<span class=\"value\">\"United Feature Syndicate\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">cartoon</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>外置型使用方式：</p>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div><div class=\"line\"><span class=\"doctype\">&lt;!DOCTYPE cartoon SYSTEM \"cartoon.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">cartoon</span> <span class=\"attribute\">copyright</span>=<span class=\"value\">\"United Feature Syndicate\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">cartoon</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>当然也可以两者同时使用：</p>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div><div class=\"line\"><span class=\"doctype\">&lt;!DOCTYPE cartoon SYSTEM \"cartoon.dtd\"</span></div><div class=\"line\">[&lt;!ATTLIST cartoon oneMore CDATA #IMPLIED&gt;]&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">cartoon</span> <span class=\"attribute\">copyright</span>=<span class=\"value\">\"United Feature Syndicate\"</span> <span class=\"attribute\">oneMore</span>=<span class=\"value\">\"3\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">prolog</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">cartoon</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"valid(不知如何翻译)\">valid(不知如何翻译)</h3>\n<p>如果XML文件完全满足某一DTD文档，则认为该XML文档 valid w.r.t a DTD。</p>\n<p>如果XML同时满足以下条件，则认为XML文档valid：</p>\n<ul>\n<li>该文档是well-formed</li>\n<li>该文档引入了一个DTD文档</li>\n<li>该文档valid w.r.t <strong>引入的</strong>文档</li>\n<li>声明元素为该文档的根元素：<code>&lt;!DOCTYPE cartoon SYSTEM &quot;cartoon.dtd&quot;&gt;</code>其中的cartoon。</li>\n</ul>\n<hr>\n<h3 id=\"什么是XML_Schema\">什么是XML Schema</h3>\n<p>XML Schema（也被称为XML Schema Definition、XSD）是DTD的替代品，并且一致认为其比DTD更加成功。相对DTD，XSD有这些特点：</p>\n<ul>\n<li>DTD<strong>不是</strong>well-formed XML文档，而XSD<strong>是</strong></li>\n<li>XSD有更强的表达能力</li>\n<li>XSD支持namespaces, datatypes(date, 06/11/2014)</li>\n<li>XML能描述元素的复杂content。</li>\n</ul>\n<h3 id=\"XSD例子：\">XSD例子：</h3>\n<p>DTD</p>\n<figure class=\"highlight DTD\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">note</span> (<span class=\"attribute\">to</span>, <span class=\"attribute\">from</span>, <span class=\"attribute\">sentOn</span>, <span class=\"attribute\">heading</span>, <span class=\"attribute\">body</span>)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">to</span> (#<span class=\"attribute\">PCDATA</span>)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">from</span> (#<span class=\"attribute\">PCDATA</span>)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">sentOn</span> (#<span class=\"attribute\">PCDATA</span>)&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">!ELEMENT</span> <span class=\"attribute\">body</span> (#<span class=\"attribute\">PCDATA</span>)&gt;</span></div></pre></td></tr></table></figure>\n\n<p>相应XSD</p>\n<figure class=\"highlight XML\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pi\">&lt;?xml version=\"1.0\"?&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">xs:schema</span> <span class=\"attribute\">xmlns:xs</span>=<span class=\"value\">\"http://www.w3.org/2001/XMLSchema\"</span> <span class=\"attribute\">targetNmaespace</span> = \"<span class=\"attribute\">http:</span>//<span class=\"attribute\">www.w3schools.com</span>\" <span class=\"attribute\">xmlns</span>=<span class=\"value\">\"http://www.w3schools.com\"</span> <span class=\"attribute\">elementFormDefault</span>=<span class=\"value\">\"qualified\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">xs:element</span> <span class=\"attribute\">name</span> = \"<span class=\"attribute\">note</span>\"&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:complexType</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:sequence</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:element</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"to\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"xs:string\"</span> /&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:element</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"from\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"xs:string\"</span> /&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:element</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"sentOn\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"xs:date\"</span> /&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:element</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"body\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"xs:string\"</span> /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"title\">xs:sequence</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"title\">xs:complexType</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">xs:element</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">xs:schema</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"type,_content,_restriction_and_extension\">type, content, restriction and extension</h3>\n<p>XSD中的type可分为simpleType and complexType:</p>\n<ul>\n<li>simpleType可以用于属性，不带子元素或者不带属性的元素</li>\n<li>complexType可以用于element content 或者mixed element content 或者 text content和attribuctes</li>\n</ul>\n<p>而content的使用：</p>\n<ul>\n<li>对于有属性声明的元素，我们不能使用simpleType，但是我们可以使用simpleContent来通过继承方式获得simpleType:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">xs:element</span> <span class=\"attribute\">name</span> = \"<span class=\"attribute\">size</span>\"&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"title\">xs:complexType</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:simpleCont</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:extension</span> <span class=\"attribute\">base</span> = \"<span class=\"attribute\">xs:integer</span>\"&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"title\">xs:attribute</span> <span class=\"attribute\">name</span> = \"<span class=\"attribute\">country</span>\" <span class=\"attribute\">type</span> = \"<span class=\"attribute\">xs:string</span>\" /&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"title\">xs:extension</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"title\">xs:simpleCont</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"title\">xs:complexType</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>complexContent则包含了继承或扩展自complexType的content或element。</li>\n</ul>\n<p>而restriction and extension则用于继承或者扩展type。从字面意义便可理解两者的区别。</p>\n<p>更详细的内容可以参看<a href=\"http://www.w3schools.com/schema/schema_elements_ref.asp\" target=\"_blank\" rel=\"external\">w3schools.com</a>。</p>\n","source":"_posts/xml整理（二）.md","raw":"title: xml整理（二）\ndate: 2014-11-06 02:22:35\ntags: [xml, course]\n---\n\n\n*时隔两日，再次来整理XML的内容，似乎间隔有些长。终究还是不够勤快，压抑不住自己爱玩的心。今天在知乎上看到大师兄又写了一篇[答案](http://www.zhihu.com/question/26092705/answer/32989919)。倒不是对所提的问题有何想法，只是大师兄的某些话说到了心坎里：*<!--more-->\n\n>“你只要不想等，不愿信，你站起来，关灯，收拾干净，拍屁股走人，出来你就是铁人，没有人伤得了你，但这应该不是你想要的。\n\n>这世上容易的，就是看破红尘，难的，恰是命里打滚，轻而易举，说一些不痛不痒，都是没想明白。”\n\n*是吧，感情也罢，梦想也罢，默默地等待，默默地付出，只觉得该为某些事情热血地追求。若自己某日，打着看破的幌子，放弃坚持的初衷。那我，还是想要为尘世的纷扰而不得解吧。等吧，等到想要的结果，等到该来的人。*\n>“在散场的最后一秒到来之前，空荡荡的剧场里走进来一个人。\n\n>你就一定要说：\n\n>等你很久啦。”\n\n*扯远了，只是想来接着整理我的XML的。今天打算整理DTD, XML schema,这几项属于Schema的内容。*\n\n---\n\n###何谓schema\nschema实际上一种描述语言，一般用于描述DBs或者XML，在此特指对XML的描述。通过Schema，可以描述XML的\n\n- 标签（tag）和属性（attribute）的名字\n- 文件的结构：（元素（element）如何嵌套、哪个元素拥有哪个属性）\n- 数据：类型（字符串？数字？）\n\n为何需要schema\n\n- XML文档可以有更多可依赖的格式：结构，标签，数据类型。但同时想保持扩展性与灵活性。\n- 可以描述怎样的数据是合法的、期待的、事先设定。\n\n对于使用schema有两种使用方式：\n\n- 描述型（descriptive）:为他人描述XML文档，如此，便可知道如何更好地组织数据。\n- 规范型（prescriptive）:防止程序调用了错误的XML文档。\n\n---\n\n###什么是DTD\nDTD是在XML1.0时代的标准。DTD并不是一个典型的XML类型的文档，故而具有以下特点：\n\n- 不能被解析为一个DOM (Document Object Model)\n- 无法扩展（即不能在一个DTD文档中import另一个DTD文档）\n- 易读易写。\n\n###DTD如何描述XML\n描述一个逻辑结构的例子：\n\n- elements\n\n```DTD\n<!ELEMENT name(#PCDATA)>\n<!ELEMENT person(name, address+, email*)>\n<!ELEMENT address(city,(nr,street)?)>\n```\n\n- attributes\n```DTD\n<!ATTLIST name type(family|personal|place) \"personal\">\n```\n\n此例子意为：元素name可以使用type属性，type可选值为family,personal,place，其中personal为默认值。\n据此规范，正确的xml文档：\n\n```XML\n<name>Bijan</name>\n<name type=\"personal\">Bijan</name>\n<name type=\"family\">Parsia</name>\n```\n\n不正确的：\n\n```XML\n<name type=\"DontKnow\">Bijan</name>\n```\n\n由此，我们可以总结，DTD描述的模板如下：\n\n```XML\n<!ELEMENT element-name (element-content)>\n<!ATTLIST element-name attribute-name attribute-type attribute-value>\n```\n\n其中element-content支持使用元素名的正则表达式。\n\n另外DTD还能描述实体引用（类似宏定义）。例子如下：\n\n```DTD\n<!ENTITY writer \"Donald Duck\">\n```\n\n###如何使用DTD\nDTD在XML文档中有两种引入方式，一种为内嵌型（internal），另一种外置型（external）。\n\n内嵌型的使用方式：\n\n```DTD\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE cartoon[\n<!ELEMENT cartoon (prolog,panels)>\n...\n<!ELEMENT speech(#PCDATA)>]>\n<cartoon copyright=\"United Feature Syndicate\">\n\t<prolog>\n\t\t...\n\t</prolog>\n</cartoon>\n```\n\n外置型使用方式：\n\n```DTD\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE cartoon SYSTEM \"cartoon.dtd\">\n<cartoon copyright=\"United Feature Syndicate\">\n\t<prolog>\n\t\t...\n\t</prolog>\n</cartoon>\n```\n\n当然也可以两者同时使用：\n\n```DTD\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE cartoon SYSTEM \"cartoon.dtd\"\n[<!ATTLIST cartoon oneMore CDATA #IMPLIED>]>\n<cartoon copyright=\"United Feature Syndicate\" oneMore=\"3\">\n\t<prolog>\n\t\t...\n\t</prolog>\n</cartoon>\n```\n###valid(不知如何翻译)\n\n如果XML文件完全满足某一DTD文档，则认为该XML文档 valid w.r.t a DTD。\n\n如果XML同时满足以下条件，则认为XML文档valid：\n\n- 该文档是well-formed\n- 该文档引入了一个DTD文档\n- 该文档valid w.r.t **引入的**文档\n- 声明元素为该文档的根元素：`<!DOCTYPE cartoon SYSTEM \"cartoon.dtd\">`其中的cartoon。\n\n---\n\n###什么是XML Schema\nXML Schema（也被称为XML Schema Definition、XSD）是DTD的替代品，并且一致认为其比DTD更加成功。相对DTD，XSD有这些特点：\n\n- DTD**不是**well-formed XML文档，而XSD**是**\n- XSD有更强的表达能力\n- XSD支持namespaces, datatypes(date, 06/11/2014)\n- XML能描述元素的复杂content。\n\n###XSD例子：\nDTD\n\n```DTD\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!ELEMENT note (to, from, sentOn, heading, body)>\n<!ELEMENT to (#PCDATA)>\n<!ELEMENT from (#PCDATA)>\n<!ELEMENT sentOn (#PCDATA)>\n<!ELEMENT body (#PCDATA)>\n```\n\n相应XSD\n\n```XML\n<?xml version=\"1.0\"?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNmaespace = \"http://www.w3schools.com\" xmlns=\"http://www.w3schools.com\" elementFormDefault=\"qualified\">\n\t<xs:element name = \"note\">\n\t\t<xs:complexType>\n\t\t\t<xs:sequence>\n\t\t\t\t<xs:element name=\"to\" type=\"xs:string\" />\n\t\t\t\t<xs:element name=\"from\" type=\"xs:string\" />\n\t\t\t\t<xs:element name=\"sentOn\" type=\"xs:date\" />\n\t\t\t\t<xs:element name=\"body\" type=\"xs:string\" />\n\t\t\t</xs:sequence>\n\t\t</xs:complexType>\n\t</xs:element>\n</xs:schema>\n```\n###type, content, restriction and extension\nXSD中的type可分为simpleType and complexType:\n\n- simpleType可以用于属性，不带子元素或者不带属性的元素\n- complexType可以用于element content 或者mixed element content 或者 text content和attribuctes\n\n而content的使用：\n\n- 对于有属性声明的元素，我们不能使用simpleType，但是我们可以使用simpleContent来通过继承方式获得simpleType:\n\n```xml\n<xs:element name = \"size\">\n\t<xs:complexType>\n\t\t<xs:simpleCont>\n\t\t\t<xs:extension base = \"xs:integer\">\n\t\t\t\t<xs:attribute name = \"country\" type = \"xs:string\" />\n\t\t\t</xs:extension>\n\t\t</xs:simpleCont>\n\t</xs:complexType>\n</xs:element>\n```\n\n- complexContent则包含了继承或扩展自complexType的content或element。\n\n而restriction and extension则用于继承或者扩展type。从字面意义便可理解两者的区别。\n\n更详细的内容可以参看[w3schools.com](http://www.w3schools.com/schema/schema_elements_ref.asp)。","slug":"xml整理（二）","updated":1415303745000,"excerpt":"<p><em>时隔两日，再次来整理XML的内容，似乎间隔有些长。终究还是不够勤快，压抑不住自己爱玩的心。今天在知乎上看到大师兄又写了一篇<a href=\"http://www.zhihu.com/question/26092705/answer/32989919\" target=\"_blank\" rel=\"external\">答案</a>。倒不是对所提的问题有何想法，只是大师兄的某些话说到了心坎里：</em>","_id":"fgxbxaqkbly3u6zr","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Hello-World!","date":1414779025000,"tags":[],"content":"<p>It’s my fisrt blog. I want to record the learning path during my PG year.</p>\n","source":"_posts/Hello-World-0.md","raw":"title: \"Hello-World!\"\ndate: 2014-10-31 18:10:25\ntags:\n---\n\nIt's my fisrt blog. I want to record the learning path during my PG year.","slug":"Hello-World-0","updated":1415142956000,"excerpt":"","_id":"u0e5q282tkdum3kb","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"xml","_id":"gp2y7iybp72u6pzj","posts":["cikqkm62y3cwxi7y","fgxbxaqkbly3u6zr"]},{"name":"course","_id":"c6nu8oagq47t7gl2","posts":["cikqkm62y3cwxi7y","fgxbxaqkbly3u6zr"]}]}